{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","backgroundColor","value","Grid","i","this","squares","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","d","Game","state","history","Array","fill","oneIsNext","slice","setState","concat","status","current","winner","draw","every","element","handleClick","connect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5a9a168.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props){\n  return(\n    <button className=\"square\" onClick={props.onClick} \n    style={{\n          backgroundColor: props.value !== null ? props.value : \"white\",         \n        }} /> //this is where I change the colour of the box. If the value of the square is null, then make it white\n        //if it is not white then have it be the same colour as the value of the box. the values have been set to be the colours\n  );\n}\nclass Grid extends React.Component\n{\n  \n  //renders the squares and sets its value to be what is written in the square\n  renderSquare(i)\n  {   \n    return (<Square \n      value={this.props.squares[i]}\n      onClick = {() => this.props.onClick(i)} \n      />\n      );\n\n      \n  }\n\n  //creates 42 squares and makes it 6x7 - similar to a real connect 4 game\n  render()\n  {\n    return (\n      <div>\n        <div className=\"board-now\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n          {this.renderSquare(6)}\n        </div>\n        <div className=\"board-now\">\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n          {this.renderSquare(9)}\n          {this.renderSquare(10)}\n          {this.renderSquare(11)}\n          {this.renderSquare(12)}\n          {this.renderSquare(13)}\n        </div>\n        <div className=\"board-now\">\n          {this.renderSquare(14)}\n          {this.renderSquare(15)}\n          {this.renderSquare(16)}\n          {this.renderSquare(17)}\n          {this.renderSquare(18)}\n          {this.renderSquare(19)}\n          {this.renderSquare(20)}\n        </div>\n        <div className=\"board-now\">\n          {this.renderSquare(21)}\n          {this.renderSquare(22)}\n          {this.renderSquare(23)}\n          {this.renderSquare(24)}\n          {this.renderSquare(25)}\n          {this.renderSquare(26)}\n          {this.renderSquare(27)}\n        </div>\n        <div className=\"board-now\">\n          {this.renderSquare(28)}\n          {this.renderSquare(29)}\n          {this.renderSquare(30)}\n          {this.renderSquare(31)}\n          {this.renderSquare(32)}\n          {this.renderSquare(33)}\n          {this.renderSquare(34)}\n        </div>\n        <div className=\"board-now\">\n          {this.renderSquare(35)}\n          {this.renderSquare(36)}\n          {this.renderSquare(37)}\n          {this.renderSquare(38)}\n          {this.renderSquare(39)}\n          {this.renderSquare(40)}\n          {this.renderSquare(41)}\n        </div>\n      </div>\n    )\n  }\n}\n\n//calculates all the winners - have included all possible combinations for winners\nfunction calculateWinner(squares){\n  const lines = [\n    [0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6],\n    [7,8,9,10],[8,9,10,11],[9,10,11,12],[10,11,12,13],\n    [14,15,16,17],[15,16,17,18],[16,17,18,19],[17,18,19,20],\n    [21,22,23,24],[22,23,24,25],[23,24,25,26],[24,25,26,27],\n    [28,29,30,31],[29,30,31,32],[30,31,32,33],[31,32,33,34],\n    [35,36,37,38],[36,37,38,39],[37,38,39,40],[38,39,40,41],\n    [0,7,14,21],[7,14,21,28],[14,21,28,35],\n    [1,8,15,22],[8,15,22,29],[15,22,29,36],\n    [2,9,16,23],[9,16,23,30],[16,23,30,37],\n    [3,10,17,24],[10,17,24,31],[17,24,31,38],\n    [4,11,18,25],[11,18,25,32],[18,25,32,39],\n    [5,12,19,26],[12,19,26,33],[19,26,33,40],\n    [6,13,20,27],[13,20,27,34],[20,27,34,41],\n  ];\n  for(let i=0;i<lines.length;i++)\n  {\n    const [a,b,c,d] = lines[i];\n    //if the value in all 4 boxes in the winning combination is the same color then this a winner and return the value\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]\n      && squares[a] === squares[d])\n      {\n        return squares[a];\n      }\n  }\n  return null;\n}\n\nclass Game extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(42).fill(null), //an array of 42\n      }],    \n      oneIsNext: true, //this is saying that player 1 is next\n    };\n  }\n\n  \n\n  handleClick(i){\n    const history = this.state.history;\n    const current = history[history.length -1];\n    const squares = current.squares.slice();\n    if(calculateWinner(squares) || squares[i])\n    {\n      return; //if there is already a winner or the square is filled, then return and don't let it be clicked again\n    }\n    squares[i] = this.state.oneIsNext ? 'red' :  'yellow'; //if player one is next then the value is red, if not then yellow\n    \n    this.setState({\n                    history: history.concat([{\n                      squares: squares,\n                    }]),               \n                    oneIsNext: !this.state.oneIsNext, //after a move, change the value of the player -> one is no longer next\n                  });\n  }\n\n  render(){\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const draw = current.squares.every(element => element !== null); //draw if all the squares are already full\n    let status;\n\n    //if the winner has already been found then display the name of the winner\n    if (winner)\n    {\n      status = 'Winner: ' + winner;\n    }\n    else if (draw)  //if no more moves are possible, then a draw has occured\n    {\n      status = 'Draw';\n    }\n    else\n    {\n      status = 'Next Player: ' + (this.state.oneIsNext ? '1-Red' : '2-Yellow'); //the game is still in progress\n    }\n    //creating the game board\n    return (\n        <div className = \"game\"> \n          <div className=\"game-grid\">\n            <Grid\n              squares = {current.squares}\n              onClick={(i) => this.handleClick(i)}/>           \n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{/* TODO */}</ol>\n          </div>\n        </div>\n    );\n  }\n}\n\n\n\nlet connect = <Game />;\n\nReactDOM.render(\n  connect,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}